<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom"><id>urn:uuid:</id><title>Home of Liam Z. — learner, hacker, thinker.</title> <subtitle>I met a man with a dollar. We exchanged dollars. We each still had one dollar. Then I met a man with an idea. We exchanged ideas. Now we each have two ideas.</subtitle> <updated>2013-06-13T20:04:19Z</updated><link type="text/html" href="http://liamz.co"/> <icon>/assets/icon.png</icon><rights>Copyright Liam (liamzebedee) Edwards-Playne 2012–2013</rights><entry><title>Religion and Respect</title> <id>urn:uuid:</id><link rel="alternate" type="text/html" href="http://liamz.co/religion-and-respect/"/> <updated></updated> <published>2013-06-12T00:00:00Z</published> <content type="html">&lt;p&gt;My attitude towards religion is that of &lt;strong&gt;critical acceptance&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id='principles'&gt;Principles&lt;/h3&gt;&lt;p&gt;I accept that people hold their own beliefs, and due to a multitude of factors including culture and personal experiences, they might seem strange to me.&lt;/p&gt;&lt;p&gt;I will encourage people to &lt;strong&gt;practise&lt;/strong&gt; their individual beliefs so long as they do not impact on others.&lt;/p&gt;&lt;p&gt;I will also encourage people to &lt;strong&gt;discuss&lt;/strong&gt; their beliefs. Understanding ideas in culture, rather than harshly criticising them, is essential to constructive thinking.&lt;/p&gt;&lt;p&gt;I will intervene when people impart their beliefs on others like &lt;strong&gt;propaganda&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Finally I remain &lt;strong&gt;accepting&lt;/strong&gt; of people&amp;#8217;s differing views, but remain &lt;strong&gt;critical&lt;/strong&gt; of their assertions.&lt;/p&gt;&lt;h3 id='history'&gt;History&lt;/h3&gt;&lt;p&gt;Up until adolescence (around the age of 13), I was a non-practising Buddhist. I began my transition to atheism after a realisation that my beliefs surrounding Buddhism were founded on &lt;strong&gt;simplistic moral principles&lt;/strong&gt;, and had little to do with Buddhist concepts (such as the &lt;a href='https://en.wikipedia.org/wiki/Buddhism#The_Four_Noble_Truths'&gt;Four Noble Truths&lt;/a&gt;). Throughout this time I had always been a &lt;a href='https://en.wikipedia.org/wiki/Philosophical_naturalism'&gt;naturalist&lt;/a&gt; and had simply held these basic morals:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Violence is unnecessary.&lt;/li&gt;&lt;li&gt;I should never directly inflict pain on animals or humans.&lt;/li&gt;&lt;li&gt;I should never take what is not given.&lt;/li&gt;&lt;li&gt;I should never lie.&lt;sup id='fnref:1'&gt;&lt;a href='#fn:1' rel='footnote'&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;&lt;li&gt;I should treat others how I wish to be treated.&lt;sup id='fnref:2'&gt;&lt;a href='#fn:2' rel='footnote'&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Up until this age, &lt;strong&gt;Buddhism&lt;/strong&gt; had been the most fitting description of my belief system, which is why I had never thought to question where I put myself.&lt;sup id='fnref:3'&gt;&lt;a href='#fn:3' rel='footnote'&gt;3&lt;/a&gt;&lt;/sup&gt; However, after some stirring Life and Faith lessons, I transitioned to atheism.&lt;/p&gt;&lt;p&gt;From 13 through 15 I was an avid and aggressive &lt;strong&gt;atheist&lt;/strong&gt; to say the least. While I still maintain the criticisms I made against others beliefs and assertions, they were needlessly aggressive and overly ego-driven. I had become what is known as an &lt;em&gt;/r/atheism&lt;/em&gt; personality.&lt;/p&gt;&lt;p&gt;Around 15 was when I realised that being proactively critical of others beliefs was ineffective, and I became &lt;strong&gt;Pastafarian&lt;/strong&gt;. If I were to describe my ethical framework now, it would best be described as &lt;strong&gt;secular humanism&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id='notes_on_pastafarianism'&gt;Notes on Pastafarianism&lt;/h3&gt;&lt;p&gt;I think it is important to distinguish between the two different types of Pastafarians:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;those who follow it as an Internet &lt;strong&gt;meme&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;those who understand the ideas behind the religion as a &lt;strong&gt;satire&lt;/strong&gt; on intelligent design&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;I place myself in the latter group and make sure to be explicit about the difference. The stereotype of a Pastafarian, combined with my technology background, usually leads people to believe that I follow Pastafarianism because I think the idea of a Flying Spaghetti Monster is funny.&lt;/p&gt; &lt;div class='footnotes'&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id='fn:1'&gt; &lt;p&gt;I later discovered these were essentially the &lt;a href='https://en.wikipedia.org/wiki/Five_Precepts#Pali_training_rules'&gt;Five Precepts&lt;/a&gt; — the basic Buddhist code of ethics&lt;/p&gt; &lt;a href='#fnref:1' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:2'&gt; &lt;p&gt;also known as the &lt;a href='https://en.wikipedia.org/wiki/The_Golden_Rule'&gt;Golden Rule&lt;/a&gt;&lt;/p&gt; &lt;a href='#fnref:2' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:3'&gt; &lt;p&gt;A note on this topic: the media is inclined to simplify various ideas and arguments into categories. I find it difficult to explain my &amp;#8216;hybrid&amp;#8217; beliefs to others, which contain ideas from multiple belief systems, as most people just want to establish which group I pertain to. However once you start classifying belief systems into different categories, you begin to develop stereotypes, which cause conflict.&lt;/p&gt; &lt;a href='#fnref:3' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content> </entry><entry><title>WebRTC is not true peer-to-peer</title> <id>urn:uuid:</id><link rel="alternate" type="text/html" href="http://liamz.co/webrtc-p2p-criticism/"/> <updated></updated> <published>2013-06-06T00:00:00Z</published> <content type="html">&lt;p class='lead'&gt;Why should you care? Because, we are hindering exciting innovation in browser-based P2P, that which might provide magnificently simple solutions to problems such as &lt;a href='https://xkcd.com/949/' title='relevant xkcd'&gt;sharing documents&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;In short:&lt;/em&gt; WebRTC renders the bootstrapping process of peer-to-peer applications (wherein you join the network by initially connecting to a node and asking them for peers) unusable because the initial connection set-up is dependent on &lt;strong&gt;centralised&lt;/strong&gt; servers.&lt;/p&gt;&lt;p&gt;I think very highly of WebRTC as a platform for a range of cool new innovations, but it is wrong to give it the status of supporting peer-to-peer (P2P) network models.&lt;/p&gt;&lt;p&gt;I&amp;#8217;m writing this post as both a &lt;strong&gt;criticism&lt;/strong&gt; of the current API and a &lt;strong&gt;plea&lt;/strong&gt; for a solution to be adopted (as the APIs are still in development).&lt;/p&gt;&lt;h3 id='problem'&gt;Problem&lt;/h3&gt;&lt;p&gt;The current issue which is hindering my efforts to create a decentralised P2P web application, is the &lt;strong&gt;centralised&lt;/strong&gt; nature of the initial connection set-up — this process is called &lt;strong&gt;signalling&lt;/strong&gt;. In a typical P2P application, you join the network through asking a node for peers, a process known as bootstrapping. This is rendered impossible in WebRTC because to connect to a node you need to engage in signalling, which is centralised.&lt;/p&gt;&lt;p&gt;RTCPeerConnection is the interface whereby peers (browsers) may connect to each other. To initially set-up a connection, peers do two things:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;Firstly they exchange network information (network interfaces and ports) using the ICE framework.&lt;sup id='fnref:1'&gt;&lt;a href='#fn:1' rel='footnote'&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;&lt;li&gt;Secondly, they negotiate a set of configurations for that session, using an offer/answer based protocol.&lt;sup id='fnref:2'&gt;&lt;a href='#fn:2' rel='footnote'&gt;2&lt;/a&gt;&lt;/sup&gt; These configurations are stored as RTCSessionDescription objects.&lt;sup id='fnref:3'&gt;&lt;a href='#fn:3' rel='footnote'&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Both of these steps require a &lt;strong&gt;signalling channel&lt;/strong&gt;. My question is why?&lt;/p&gt;&lt;h3 id='solutions'&gt;Solutions&lt;/h3&gt;&lt;p&gt;You could write a terrible hack to make use of IRC web chat or anonymous XMPP servers to exchange signalling information. It wouldn&amp;#8217;t be ethical or appropriate to rely on Wikileaks&amp;#8217; web IRC for decentralised signalling, so there must be an alternative.&lt;/p&gt;&lt;p&gt;Another idea is to set-up a public signalling server. We already have public servers available for STUN (as provided by Google and Mozilla), which is the mechanism for traversing NAT. So why don&amp;#8217;t we have them for signalling? Because they can be abused and again it is unreliable to rely on a third-party, which is the basis of this issue.&lt;/p&gt;&lt;p&gt;But the only real solution is &lt;strong&gt;changing the WebRTC API to suit us&lt;/strong&gt;, so we could do do signalling by directly communicating with the other peer. I&amp;#8217;ve looked into this and it &lt;a href='http://stackoverflow.com/questions/16954585/is-it-possible-to-directly-connect-using-ice-and-then-do-direct-peer-to-peer-sig'&gt;isn&amp;#8217;t possible&lt;/a&gt; right now, but I think it should be.&lt;/p&gt;&lt;h3 id='conclusion'&gt;Conclusion&lt;/h3&gt;&lt;p&gt;I don&amp;#8217;t claim to have all the answers — if someone knows how to achieve this, and refutes what I have said, then great! Until then, &lt;strong&gt;something needs to be done&lt;/strong&gt;.&lt;/p&gt; &lt;div class='footnotes'&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id='fn:1'&gt; &lt;p&gt;the WebRTC API has few tutorials for people coming from a BSD sockets background, but basically how this works is you use the &lt;a href='http://www.w3.org/TR/webrtc/#widl-RTCPeerConnection-addIceCandidate-void-RTCIceCandidate-candidate'&gt;addIceCandidate&lt;/a&gt; function to add a remote endpoint (RTCIceCandidate object) for the peer you will be connecting to.&lt;/p&gt; &lt;a href='#fnref:1' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:2'&gt; &lt;p&gt;see the &lt;a href='http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-createOffer-void-RTCSessionDescriptionCallback-successCallback-RTCPeerConnectionErrorCallback-failureCallback-MediaConstraints-constraints'&gt;createAnswer&lt;/a&gt; documentation&lt;/p&gt; &lt;a href='#fnref:2' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:3'&gt; &lt;p&gt;RTCSessionDescription is just a wrapper for an &lt;a href='https://en.wikipedia.org/wiki/Session_Description_Protocol'&gt;SDP Blob&lt;/a&gt;, which is a really simple text-based format.&lt;/p&gt; &lt;a href='#fnref:3' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content> </entry><entry><title>We: a magnificent piece of dystopia</title> <id>urn:uuid:</id><link rel="alternate" type="text/html" href="http://liamz.co/we-zamaytin/"/> <updated></updated> <published>2013-04-27T00:00:00Z</published> <content type="html">&lt;p&gt;While camping I read a dystopian novel called &lt;a href='https://en.wikipedia.org/wiki/We_%28novel%29'&gt;We&lt;/a&gt;. I&amp;#8217;ve read the classics of the genre – 1984, Brave New World, Animal Farm – but this novel, it was something else.&lt;/p&gt;&lt;p&gt;A particularly fascinating idea I found in &lt;em&gt;We&lt;/em&gt;, which I also seem to remember in Huxley&amp;#8217;s &lt;em&gt;Brave New World&lt;/em&gt; (when the Savage speaks with Mustapha Mond, ~211), is the pursuit of happiness. Definitely my favourite part of the text was the protagonist D-503&amp;#8217;s chat with the ruler of the &amp;#8216;One State&amp;#8217; the Benefactor, where he ridicules D for opposing mankind&amp;#8217;s historic aim – to be happy.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;If this means you are in agreement with me – then let&amp;#8217;s talk like grownups, when the children have gone to bed: about everything right down to the end.&lt;/p&gt;&lt;p&gt;I ask you: what have people – from the very cradle – prayed for, dreamed about, and agonised over? They have wanted someone, anyone, to tell them once and for all what happiness is – and then attach them to this happiness with a chain&amp;#8230; What are we doing now, if it isn&amp;#8217;t this?&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The beauty in this extract is the atmosphere that preceds it. To have the protagonist, a character constructed to be absolutely conformist and oblivious to the system in which he is imprisoned, speaking to the very orchestrator of this process. One who understands the purpose behind it all – a semblance of omnipotence.&lt;/p&gt;&lt;p&gt;I am in a state of awe, but for why it is hard to describe. I just find this novel particularly brilliant.&lt;/p&gt;</content> </entry><entry><title>Ultimate introduction to Jekyll.</title> <id>urn:uuid:</id><link rel="alternate" type="text/html" href="http://liamz.co/jekyll-guide/"/> <updated></updated> <published>2013-03-28T00:00:00Z</published> <content type="html">&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt; is a website generation framework written in Ruby. The philosophy of Jekyll is simplicity. Jekyll generates static websites that require no server-side generation; the output of a Jekyll site can be served to a web browser &lt;strong&gt;without additional processing&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Jekyll at its core is a text transformation engine that operates on files. A Jekyll site is &lt;strong&gt;stored on the filesystem&lt;/strong&gt; and processed by the &lt;strong&gt;jekyll&lt;/strong&gt; executable to produce a static site, found in the &lt;em&gt;_site&lt;/em&gt; directory. Jekyll takes files it deems to be content (which can be written in multiple markup languages), and churns them through a templating engine to produce a webpage.&lt;/p&gt;&lt;p&gt;Because the site is stored on the filesystem, there are multiple traits you can observe to distinguish the purposes of each file.&lt;/p&gt;&lt;h3 id='special_files'&gt;Special files&lt;/h3&gt;&lt;p&gt;These are files that begin with an underscore. Jekyll will ignore any files that begin with an underscore. I call these files &amp;#8216;special files&amp;#8217; because usually they have some purpose in site generation, but aren&amp;#8217;t part of the final site.&lt;/p&gt;&lt;p&gt;So we are building a site with Jekyll. We start with an empty directory, &lt;em&gt;website&lt;/em&gt;. After running &lt;strong&gt;jekyll&lt;/strong&gt;, a directory is produced: &lt;em&gt;_site&lt;/em&gt;. This directory contains nothing. Why did the directory contain nothing? Because nothing amounts to nothing. The moral of this story is that the &lt;em&gt;website&lt;/em&gt; directory contains content — when there is no content, no website is made.&lt;/p&gt;&lt;p&gt;This time you have done something - you&amp;#8217;ve made a very simple &amp;#8220;Hello World&amp;#8221; webpage, which is saved as &lt;em&gt;index.html&lt;/em&gt;. You run &lt;strong&gt;jekyll&lt;/strong&gt; and what do you know, that very page has now been copied to &lt;em&gt;_site/index.html&lt;/em&gt;. Jekyll will copy all files that &lt;strong&gt;do not begin with an underscore&lt;/strong&gt;, and &lt;strong&gt;need not be processed&lt;/strong&gt;, to the &lt;em&gt;_site&lt;/em&gt; directory.&lt;/p&gt;&lt;h3 id='yaml_front_matter'&gt;YAML Front Matter&lt;/h3&gt;&lt;p&gt;But how does Jekyll know what files need to be churned through the templating engine? It is very simple actually, each file that needs to be processed starts with what we call &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;YAML Front Matter&lt;/strong&gt; is a header at the top of a file, written in &lt;a href='https://en.wikipedia.org/wiki/YAML'&gt;YAML&lt;/a&gt;, and encased in three dashes at the top and bottom, that determines how a file is processed. An example file, &lt;em&gt;capitalism.md&lt;/em&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;--- layout: post --- How is **capitalism** shaping government?&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;YAML Front Matter&lt;/strong&gt; is used for setting:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;predefined variables&lt;/li&gt;&lt;li&gt;custom data of your own&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Now we will move on to discuss the predefined &lt;em&gt;layout&lt;/em&gt; variable.&lt;/p&gt;&lt;h3 id='templating_engine_basics'&gt;Templating engine: basics&lt;/h3&gt;&lt;p&gt;Every file that contains &lt;strong&gt;YAML Front Matter&lt;/strong&gt; is processed by the templating engine. The templating language used is Liquid, which is a very simple and safe language for simple manipulation of data.&lt;/p&gt;&lt;p&gt;Now back to the &lt;em&gt;layout&lt;/em&gt; variable. When we specify this variable, a file will attempted to be loaded from a special directory called &lt;strong&gt;_layouts&lt;/strong&gt;. In the above example, we specified &amp;#8216;post&amp;#8217; to be our layout. When &lt;em&gt;capitalism.md&lt;/em&gt; is run through the templating engine, everything except the &lt;strong&gt;YAML Front Matter&lt;/strong&gt; will be stored in a &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;template variable&lt;/a&gt; &lt;em&gt;content&lt;/em&gt;. So for the layout &lt;em&gt;post&lt;/em&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;article id=&amp;quot;post&amp;quot;&amp;gt; {{ content }} &amp;lt;/article&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The file generated, &lt;em&gt;_site/capitalism.html&lt;/em&gt;, will look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;article id=&amp;quot;post&amp;quot;&amp;gt; How is &amp;lt;b&amp;gt;capitalism&amp;lt;/b&amp;gt; shaping government? &amp;lt;/article&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What have we learned?&lt;/p&gt;&lt;ol&gt; &lt;li&gt;Jekyll processes all files with YAML Front Matter&lt;/li&gt;&lt;li&gt;Processed files are structured in a layout heirachy, where their content is assigned to the variable &lt;em&gt;content&lt;/em&gt;. The variable &lt;em&gt;layout&lt;/em&gt; determines how the file is rendered.&lt;/li&gt;&lt;li&gt;Depending on the markup language of the file, additional conversions may happen.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;In the previous example, capitalism.html had the word capitalism in bold. The layout that the post used was written in HTML, but the post itself was written in Markdown. This exemplifies despite its simplicity, the powerful nature of Jekyll.&lt;/p&gt;&lt;p&gt;In this section we created a &lt;strong&gt;page&lt;/strong&gt; &lt;em&gt;capitalism.md&lt;/em&gt; and a &lt;strong&gt;layout&lt;/strong&gt; &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;&lt;h3 id='templating_engine_advanced'&gt;Templating engine: advanced&lt;/h3&gt;&lt;p&gt;So far we have learnt about the basics of Jekyll templating. Now we should learn some more about the filesystem structure.&lt;/p&gt;&lt;p&gt;There are three special files that are yet to be discussed: &lt;em&gt;_config.yml&lt;/em&gt;, &lt;em&gt;_includes&lt;/em&gt; and &lt;em&gt;_posts/&lt;/em&gt;.&lt;/p&gt;&lt;ol&gt; &lt;li&gt;The config file specifies site-wide variables &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;that are used by both Jekyll&lt;/a&gt; and can be used by templates. It&amp;#8217;s like a global YAML Front Matter.&lt;/li&gt;&lt;li&gt;The includes directory contains templates that can be used by layouts and posts/pages alike.&lt;/li&gt;&lt;li&gt;This is the &amp;#8216;blog-aware&amp;#8217; feature of Jekyll. The posts directory contains posts (e.g. &lt;em&gt;capitalism.md&lt;/em&gt;) that are accessible via variables (e.g. they can be iterated) and can also have other meta data tweaked (such as permalink structure and categories).&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Each file in the &lt;em&gt;_posts&lt;/em&gt; directory must follow the format of &lt;em&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/em&gt;. Each post can set YAML Front Matter &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;global variables&lt;/a&gt;, of which the following are most popular:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; — the title of the post (overrides such specified in the filename)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt; — the date when the post was published (overrides such specified in the filename)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;categories&lt;/strong&gt; — a list of categories the post belongs to (which can also be specified in the directory structure of _posts, but that&amp;#8217;s rather unecessary for small blogs)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt; — layout to which the post is inserted into&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Lastly, to use Jekyll effectively you should learn how to use the &lt;a href='https://github.com/shopify/liquid/wiki/liquid-for-designers'&gt;Liquid templating language&lt;/a&gt;, what powers Jekyll templates.&lt;/p&gt;&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this guide I have covered the basic concepts needed to understand how Jekyll websites are implemented. Jekyll is a text transformation engine that operates on files, and uses a combination of the Liquid templating language, YAML Front Matter and underscores to provide a powerful yet simplistic alternative to popular CMSs. Its usage of text files instead of databases is what has garnered the title of &amp;#8220;hacker&amp;#8217;s blogging framework&amp;#8221;, allowing everyone to use their favorite editor.&lt;/p&gt;</content> </entry></feed>